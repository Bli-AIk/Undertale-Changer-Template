/*储存背包相关的文本显示。
具体编写格式为：
Item\数据名称\显示名称\食用显示\调查显示\丢弃显示;   用于显示Item的中文名称
Data\显示名称;   用于其余显示

若修改语言包，请仅修改 显示名称 及 其后 的内容 *而不要* 更改前面的内容。
无法自己增加额外的文本， 只能修改 游戏内的文本 。

请 不要 修改Data前缀的数据的 顺序 ，也 建议 不要 修改Item前缀的数据的 顺序 。
请 不要 修改Data前缀的数据的 顺序 ，也 建议 不要 修改Item前缀的数据的 顺序 。
请 不要 修改Data前缀的数据的 顺序 ，也 建议 不要 修改Item前缀的数据的 顺序 。

不要忘记每段后要加上 ";" 符号。
你可以打回车，在语句内外都行。
建议进行更改前先 备份 此文件。
更改完毕后请确定本txt格式为 UTF-8  若不是请在 “另存为” 中修改为 UTF-8 并 覆盖 此文件。

特殊字符输入：

</data0> 调用data中的文字 其中的 0 为编号，这个编号是从0开始计数而不是从1开始的。
可更改 (禁止套娃！！！！！！！)

</autoFoodFull>自动检测玩家血量和该物品回复血量，然后显示 
* 你吃掉了XX。
* 你回复了XXHP！/你的HP已满。 
</autoFood>或 齉 字符同上，但是没有前半句。(你食用了XX。)
请注意，该字符只能放在 食用显示 内，在别的位置上时，程序会无视掉它。

</autoCheckFood>自动检测该食物并显示 * “名称”-治愈 XX HP
-子项</itemHp>获取食物补充的hp 
-子项</itemNameFood>获取物品名称。其中的 Food 可以改为 Arm/Armor/Other

</autoArm>自动检测该武器并显示 * 你装备了XX。
</autoArmor>自动检测该防具并显示 * 你装备了XX。

</autoCheckArm>自动检测该武器并显示 * “名称”-武器 AT XX
-字项</itemAtk>获取ATK
</autoCheckArmor>自动检测该防具并显示 * “名称”-防具 DF XX
-字项</itemDef>获取DEF

</autoLoseFood>自动检测物品名称并显示 * XX被你扔掉了。其中的 Food 可以改为 Arm/Armor/Other
以上原理均为调用data。

打字机特殊字符(通用)输入：
</stop>或 龘 字符会使打字机经过此字符时会短暂停顿。
(该字符不会被打出 一般用于标点符号前/后。原理为使用预设的“停顿打字速度”打出一个空字符，从而实现停顿。
在旧模板中，打字机经过标点符号就会停顿，但这也导致了一些特殊情况无法解决。因此，修改为必须手动添加该字符。
请注意，按下X后不会在此字符处停顿。该字符可叠加使用。停顿速度根据打字机的设置而定——简单来说就是你改不了)

</enter>回车符 

</else>显示分隔符，如果若食物有多种显示文本，使用该符号分割。
-一般情况下，各个文本显示出现的概率均等。(WIP 未完成 勿用)

如果你需要输入很长的一段文字或单纯想要玩家多按那么一下子Z键，你可以在一段文本内插入 </passText>或 轂 字符
打字机检测该字符后会停止打字，玩家若按下Z键将会清空当前文本并继续打字状态。
此前的富文本将失效，因为此前的文本都清空了。

富文本输入示意：
<color=#00000000>颜色符 支持RGBA 十六进制
</color>去除颜色

<b>粗体
</b>去除粗体

<i>斜体
</i>去除斜体

<size=50>更改字体大小
</size>去除更改

<color=red>颜色符 具体支持名称请自行浏览器搜索“富文本”或“Unity 富文本”
</color>去除颜色

—————————剧———透———注———意—————————
*此文档包含游戏内剧情内容*
为了您的游戏体验，若您未完成游戏流程，请勿浏览此文本包。
另外不要把两个注释连着写 至少隔3字符 否则可能会报错。

*/

/* I T E M */
Item\baaaaaaaaaaaaaaaa\两份吃的\</autoFoodFull></enter>* 又得测试，寄了</stop>.</stop>.</stop>.</passText>* 不过还是蛮顺利的嘛。\</autoCheckFood></enter>* 不可名状的玩意儿</stop>.</stop>.</stop>.</passText><color=yellow>* 草测试成功了我操！！！\</autoLoseFood>;
Item\bang\一份吃的\* 你尝了一口这剩下的玩意儿。</stop></enter></autoFood>\</autoCheckFood></enter>* 仍旧是不可名状</stop>.</stop>.</stop>.\</autoLoseFood>;

Item\pia1\破烂玩具刀\</autoArm>\</autoCheckArm>\</autoLoseArm>;
Item\pia2\<color=yellow>黄金圣剑普拉斯</color>\</autoArm></enter>* 金色传说了属于是。\</autoCheckArm></enter>* 嗯...你妈的什么玩意(\* <color=red>你就这么丢了？</stop>？</stop>？</color>;


Item\tatata1\测试用纸壳子\</autoArmor>\</autoCheckArmor>\</autoLoseArmor>;
Item\tatata2\能穿的玩意儿\</autoArmor>\</autoCheckArmor>\</autoLoseArmor>;


/* D A T A */

Data\物品</enter></color>状态;/*颜色检测变灰是刻在代码里的，如果不要可以把</color>写在最前面*/
Data\攻击;/*状态*/
Data\防御;
Data\ 还需;
Data\武器:;
Data\防具:;
Data\金钱:;
Data\测试;/*7 编写过程中测试所用文字 无实义 可以不改但别删*/
Data\使用;
Data\说明;
Data\丢弃;/*编号：10*/

/*
物品 使用/调查/丢弃
11+ 
*/

Data\* 你吃掉了</itemNameFood>。</stop>;
Data\* 你回复了齉HP！</stop>;/*未用到</itemHp>。这一步需要实时检测，故在打字机中单独插入一个检测方法。这里的 齉 只会用来检测在哪里插入HP数*/
Data\* “</itemNameFood>”-治愈 </itemHp> HP</stop>;
Data\* 你装备了</itemNameArm>。</stop>;
Data\* 你装备了</itemNameArmor>。</stop>;
Data\* “</itemNameArm>”- 武器 </stop>AT </itemAtk></stop>;
Data\* “</itemNameArmor>”- 防具 </stop>DF </itemDef></stop>;
Data\* </itemNameFood>被你扔掉了。</stop>;
Data\* </itemNameArm>被你扔掉了。</stop>;
Data\* </itemNameArmor>被你扔掉了。</stop>;/*20*/
Data\* </itemNameOther>被你扔掉了。</stop>;
Data\* 你的HP已满。</stop>;