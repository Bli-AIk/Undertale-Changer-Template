/*
 backpack related text display
The specific format is:
Item\Data name\Display name\Text for USE\Text for INFO\Text for DROP;   The translation name used to display the item
Data\Display name;   Used for other displays

If you want to modify the language pack, please only modify the Display name and its subsequent contents and NOT the previous contents

You cannot add additional text by yourself. You can only modify the text in the game

Please do not modify the data order of the Data prefix. It is also recommended not to modify the data order of the Item prefix.
Please do not modify the data order of the Data prefix. It is also recommended not to modify the data order of the Item prefix.
Please do not modify the data order of the Data prefix. It is also recommended not to modify the data order of the Item prefix.

Don't forget to add ";" after each paragraph Symbol.

You can call back, either inside or outside the statement

It is recommended that you back up this file before making changes

After the change, please confirm that the txt format is UTF-8. If not, please modify it to UTF-8 in "Save As" and overwrite this file

Special character input:

<data0>Call the text in the data, where 0 is the number. The number starts from 0 instead of 1

Can be changed (No Dolphins!!!!!!!)

<autoFoodFull>Automatically detect the player's HP and the item's recovered HP, and then display:
* You ate XX.
* * You recovered XX HP! / Your HP was maxed out.
<autoFood> ditto,but there is no first half sentence.(You ate XX.)
Please note that this character can only be placed in Text for USE, otherwise, the program will ignore it.


<autoCheckFood>Automatically detect the food and display * "Name" - Heals XX HP
-Subitem<itemValue>Get food supplement hp 
-Subitem<itemNameFood>Get the name of the item, in which Food can be changed to Weapon/Armor/Other

<autoWeapon>Automatically detect the Weapon and display * You equipped XX.
<autoArmor>Automatically detect the Armor and display * You equipped XX.

<autoCheckWeapon>Automatically detect the Weapon and display * "Name" - WEAPON AT XX
-Subitem<itemValue>get ATK
<autoCheckArmor>Automatically detect the Armor and display * "Name" - ARMOR DF XX
-Subitem<itemValue>get DEF

<autoLoseFood>Automatically detects the item name and displays "* XX was thrown away."

Food can be changed to Weapon/Armor/Other

The above principle is to call data.

Typewriter special characters (general) input:
<stop> causes the typewriter to pause briefly as it passes through the character.
(This character will not be printed before/after the punctuation mark. The principle is to use the preset "pause typing speed" to type a blank character to achieve pause.

<enter>Use it to enter the carriage return symbol. 

</else>Display separator, if the food has more than one display text, use this symbol to split.

-In general, the probability of occurrence of each text display is equal. (WIP, please do not use)

If you need to input a long text or simply want the player to press the Z key more often, you can insert<waitForUpdate> into a text

After the typewriter detects the character, it will stop typing. If the player presses the Z key, it will clear the current text and continue typing.

The previous rich text will be invalidated because the previous text is empty.

Rich text input:
<color=#00000000>Color symbol, support RGBA, need hexadecimal
</color>Remove color

<b>bold
</b>Remove bold

<i>italic
</i>Remove italic

<size=50>Change font size
</size>Remove Changes

<color=red>Color symbol. If you need a specific support name, please search "Rich Text" or "Unity Rich Text" on your browser
</color>Remove color
————————- SPOILER REMINDER -————————

*This document contains in-game story content*

For your game experience, if you have not completed the game process, please do not browse this text package.

In addition, do not write two comments consecutively at least 3 characters apart, otherwise an error may be reported.

*/

/* I T E M */
Item\TwoServings\Two servings\<autoFoodFull><markEnter>Another test, ahhhhh<stop><stop...><waitForUpdate><markPoint>But it went well.\<autoCheckFood><markEnter>An indescribable gadget<stop><stop...><waitForUpdate><color=yellow><markPoint>Oh, my God, the test was successful!!!\<autoLoseFood>;
Item\Serving\A serving of food\<markPoint>You tasted the rest of this stuff.<stop><enter><autoFood>\<autoCheckFood><markEnter>Still nameless<stop><stop...>\<autoLoseFood>;

Item\TKnife\Broken t.knife\<autoWeapon>\<autoCheckWeapon>\<autoLoseWeapon>;
Item\PSword\<color=yellow>Golden Sword PLUS</color>\<autoWeapon><markEnter>Golden Legend This is.\<autoCheckWeapon><markEnter>Um... wtf is that(\<markPoint><color=red>You just throw it away?<stop>?<stop>?</color>;


Item\TPS\T.P.S\<autoArmor>\<autoCheckArmor>\<autoLoseArmor>;
Item\WearableSth\Wearable sth\<autoArmor>\<autoCheckArmor>\<autoLoseArmor>;


/* D A T A */

Data\ITEM<enter></color>STAT;/*Color detection graying is written in the code. If you don't need this effect, you can write</color>at the top*/
Data\AT;/*STAT*/
Data\DF;
Data\ NEXT;
Data\WEAPON:;
Data\ARMOR:;
Data\GOLD:;
Data\CAO;/*7 This is the text used for testing during the writing process. It has no real meaning. You can leave it unchanged, but do not delete it*/
Data\USE<indent=27.5>;
Data\INFO<indent=56.5>;
Data\DROP;/*number:10*/

/*
item use/info/drop
11+ 
*/

Data\<markPoint>You ate <itemNameFood>.<stop>;
Data\<markPoint>You recovered <itemValue> HP!<stop>;
Data\<markPoint>"<itemNameFood>" - Heals <itemValue> HP<stop>;
Data\<markPoint>You equipped <itemNameWeapon>.<stop>;
Data\* You equipped <itemNameArmor>.<stop>;
Data\* "<itemNameWeapon>" - Weapon <stop>AT <itemValue><stop>;
Data\* "<itemNameArmor>" - Armor <stop>DF <itemValue><stop>;
Data\* <itemNameFood> was thrown away.<stop>;
Data\* <itemNameWeapon> was thrown away.<stop>;
Data\* <itemNameArmor> was thrown away.<stop>;/*20*/
Data\* <itemNameOther> was thrown away.<stop>;
Data\* Your HP was maxed out.<stop>;